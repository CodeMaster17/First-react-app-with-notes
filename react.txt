-------------------------------Introduction------------------------------------------------------
What is react?
Ans: Open Source Library for building user interfaces
    Not a framework
    Focus on UI
    Rich ecosysytem
    created and maintained by Facebook
    Reusable code in Angular,Vue
    component based architecture
    React is declerative--tell react what you want and React will build acctual UI

    -->to create react App->go to terminal and type->

    npx create-react-app {name of the app folder}
    cd my-app
    npm start
    
-->Make the first letter of identifier as capital

----------------------------------Shortcuts---------------------------------------------------
-->rfce : to render snippet of function
-->rce : to create class component
-->rconst : to create a constructor

-------------------------------Folder structure-------------------------------------------------
-->in package.json React contains about its version, scripts and dependencies
-->node modules contain all the dependencies
-->the element with id="root" in index.html is controlled by React
-->App.js controls html file displayed on the screen


-------------------------------Components-------------------------------------------------------
-->App component contains all other components.
-->components describe a part of user interfaces.
-->They are reusable and can be nested inside other components.
-->There are two types of components

    #Stateless function components
        $Contains javascript functions
        $eg
            function welcome(props){
                return <h1>Hello {props.name}</h1>;
            }
            
    #Statefull class component
        $class extending component class
        $eg
            class Welcome extends React.component{
                render(){
                    return <h1>Hello,{props.name}</h1>;
                }
            }


------------------------------Fucntional components----------------------------
-->are just javascript functions
-->It takes properties are known as props
-->its html is known as JSX but from beginner point of view we call it html


--> Add line in each user created component:
        import React from 'react';

-------------------------First react application ----------------------------

in file $Greet.js


    import React from 'react';

    function Greet(){
        return <h1>Hello Vishwas</h1>
    }
    export default Greet;


in file $App.js
    
    import React, {Component} from 'react'
    import './App.css';
    import Greet from './components/Greet';
    class App extends Component{
    render(){
        return(
            <div className="App">
                <Greet/>
            </div>
        )
        }
    }

    export default App;


    ---------------------------------First react program End--------------------------------

    -->It is prefereed to use arrow fucntions to define component  


-------------------------------------------Class based componenets start-----------------------------------------
-->class based components take in props and return JSX (html).
-->It also maintains private information also known as 'state'.
-->in this case we need to import react and one of its class {component}

---------------------------$ Functional Component v/s Class component $----------------------------------

    #Fucntional Component
        -->Simple fucntions
        -->Use Fucntions as much as possible
        -->Absence of 'this' keyword
        -->Solution without using state
        -->Mainly responsible for UI
        -->Also known as Stateless/Dumb/Presentational
    #Class component
        -->More feature Rich
        -->maintain their own private data
        -->complex Ui logic
        -->provide lifecycle hooks
        -->Statefull/smart/container


----------------------------------------JSX start-----------------------------------------------------
-->Javascript XML(JSX)-extension o fjavascriptt language syntax
-->Write XML like codes for elements and componenets
-->JSX is not a necessatiy to write React components
-->But JSX makes the code a lot more easier,simpler, and elegant
-->JSX ultimately transpiles to javascripts which is understood by browsers
-->That is why import React in first line of every componenets,  because calling React library, JSX uses the libraries 
 
    #JSX differences
    -->class -> className
    -->for -> htmlFor

------------------------------------------Props (short form of properties)-------------------------------
-->Makes the component dynamic
-->When using the same componenet multiple times in App.js , the same component can have a different values passed on as props
-->To store the prop we specify the `attributes`
    $for eg:
          <Greet name="Bruce"/>
        #here `name` is an attribute whereas `Bruce` is a value of the attribute

-->whenever we use prop, an object is created whose name is same as the attribute name given while rendering the fucntion in App.js
-->we can use that object property by writng the syntax:
    {`{object-name}.{attribute-name}`}

    $for eg
    --here the object name is props by default and `name` is the name of the attribute--
        {props.name}



-----------------------------------------------------props v/s state----------------------------------------------
    #props
        -->props get passed into the componenet
        -->Function parameters
        -->props cannot be changed
        -->$How to use-
             props -Fucntional components
            this.props -Class components
    
    #state
        -->state is managed within the component
        -->Variables declared in thee function body
        -->state can be changed
        -->$how to use-
            useState Hook -Fucntional components
            this.state- Class Components (will be used more often)

-----------------------------------------------------------------State-------------------------------------------------------------
for eg: if we want to change to text , when the button is clicked, it cannot be changed by changing the property using props, because when we use props, it cannot altered, this can be acheived by using state

----------------------------------------------------------------Set State----------------------------------------------------------
-->Always make use of setState and never modify the state directly
-->whenever you want to execute a function right after the setState() fucntion is executed, do not place it right after the setState(), instead pass the code as a callback function in setState(). 
    $for example:
           this.setState({
            count:this.state.count+1
            },()=>{console.log('callback value:',this.state.count)});

             // this console will print value one less than the original value beccause it will be executed even before the increment statement
            // to overcome this we use to pass callback function as parameter in set state that will be a arrow fucntion in this case given in line number 20

        console.log(this.state.count);
    }
-->Here ()=>{console.log('callback value:',this.state.count)} is passed as callback function in setState.


-->If we want to increment the value of variable 5 times, for that if we create a function, that increases the value of the passsed variable by 1, and call that function 5 times, the result will not be in our favour. This is because React groups the call of a function a multiple times to a single time.

--> when you have to update state based on the previous state value, pass in a function as an argument instead of regular object



-------------------------------------------------------Destructuring props and state-------------------------------------------------
$ --Destructuring--(used in Greetings)
    -->It is a property in ReactJs that  makes it possible to unpack values from arrays, or properties form objects, into distinct variables
    -->In React destructuring increases code readability.    


----------------------------------------------------Event Handling------------------------------------------------------------       
-->Name of the event should follow camel case
-->When a function is called it ahould be called within curly braces and parantheses should not be used
    $for eg:
    -->the function should be called like this
     <button onClick={clickHandler}>Click me</button>

    -->it should not be called like this
     <button onClick={clickHandler()}>Click me</button>
     -->if this is done the function will run on the page load and not on the time of event

-->Event handler is a fucntion and not a fucntion call.
        
-----------------------------------------------------Methods as props----------------------------------------------------
file:(ParentComponent),(ChildComponent)

----------------------------------------------------Conditional rendering------------------------------------------------
-->same as used in javascript
    -->if/else
    -->Element variables
    -->Ternary Conditional operator
    -->Short Circuit Operator

file: UserGreeting.js

--> if else condition is added inside render method and outside return method